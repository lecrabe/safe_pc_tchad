dbf   <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/guinea_ecuatorial/gis_data/districtos/districtos_aea.dbf"
stsname <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/guinea_ecuatorial/gis_data/stats_estudio_dd_districto.txt"
dbfname <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/guinea_ecuatorial/gis_data/districtos/districtos_aea.dbf"
df <- read.table(stsname)
library(foreign)
dbf <- read.dbf(dbfname)
dbfcode <- "Id"
dbfattr <- "distrito"
df <- read.table(stsname)
dbf <- read.dbf(dbfname)
dfclass <- c(11:15,21:25,31:35,41:45,51:55,61:65,71:75)
head(df)
df <- df[,c(1,2,3,dfclass+3)]
head(df)
names(df) <- c(dbfcode,"total","nodata",paste0("class",dfclass))
head(df)
names(dbf)
out <- merge(df,dbf[,c(dbfcode,dbfattr)])
dbfname <- paste0(rootdir,"/districtos/districtos_aea.dbf")
rootdir <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/guinea_ecuatorial/gis_data/"
write.csv(out,paste0(rootdir,"stats_attribute.csv"),row.names = F)
pixel   <- 28.725591297466643
df <- cbind(df[,c(1)],df[,c(2,3,dfclass+3)]*pixel*pixel/10000)
rootdir <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/guinea_ecuatorial/gis_data/"
stsname <- paste0(rootdir,"stats_estudio_dd_districto.txt")
dbfname <- paste0(rootdir,"/districtos/districtos_aea.dbf")
dbfcode <- "Id"
dbfattr <- "distrito"
dfclass <- c(11:15,21:25,31:35,41:45,51:55,61:65,71:75)
pixel   <- 28.725591297466643
df <- read.table(stsname)
dbf <- read.dbf(dbfname)
df <- cbind(df[,c(1)],df[,c(2,3,dfclass+3)]*pixel*pixel/10000)
names(df) <- c(dbfcode,"total","nodata",paste0("class",dfclass))
head(df)
names(dbf)
out <- merge(dbf[,c(dbfcode,dbfattr)],df)
write.csv(out,paste0(rootdir,"stats_attribute.csv"),row.names = F)
out <- merge(dbf,df)
write.csv(out,paste0(rootdir,"stats_attribute.csv"),row.names = F)
####### SET WHERE YOUR PROCESSING DATA WILL BE CREATED AND STORED
rootdir   <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/tchad/"
####### SET WHERE YOUR SCRIPTS ARE CLONED
clonedir <- paste0(rootdir,"scripts_tchad/")
scriptdir <- paste0(clonedir,"process/")
p_procdir <- paste0(clonedir,"pre-processing/")
####### SET WHERE YOUR IMAGE DIRECTORY IS
rawimgdir  <- "/media/dannunzio/hdd_remi/tchad/"
procimgdir <- "/media/dannunzio/hdd_remi/tchad/images/"
v1 <- c(658521.8,899480.1,658542.7,899474.7)
v2 <- c(654867.1,905720.3,654881.9,905723.6)
v3 <- c(661263.7,911848.8,661284.9,911836.9)
v4 <- c(663856.0,905913.1,663873.0,905909.3)
v5 <- c(665309.9,900033.7,665338.4,900027.4)
v6 <- c(664139.8,898281.1,664164.5,898272.5)
all_v <- rbind(v1,v2,v3,v4,v5,v6)
shift_x <- all_v[,1]-all_v[,3]
shift_y <- all_v[,2]-all_v[,4]
plot(shift_x,shift_y)
dev.off()
par(mfrow = c(3,4))
par(mar=c(0,0,0,0))
for(i in 1:6){
v <- all_v[i,]
lp <- list()
e<-extent((v[1]+v[3])/2-50,
(v[1]+v[3])/2+50,
(v[2]+v[4])/2-50,
(v[2]+v[4])/2+50)
poly <- Polygons(list(Polygon(cbind(
c(e@xmin,e@xmin,e@xmax,e@xmax,e@xmin),
c(e@ymin,e@ymax,e@ymax,e@ymin,e@ymin))
)),"box")
lp <- append(lp,list(poly))
## Transform the list into a SPDF PRIMER ERROR
box <-SpatialPolygonsDataFrame(
SpatialPolygons(lp,1:length(lp)),
data.frame("box"),
match.ID = F
)
rasname <- paste0(procimgdir,"aoi1_2004_west_utm.tif")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
rasname <- paste0(procimgdir,"aoi1_2016_spot.TIF")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
}
source(paste0(scriptdir,"load_packages.R"),echo=TRUE)
for(i in 1:6){
v <- all_v[i,]
lp <- list()
e<-extent((v[1]+v[3])/2-50,
(v[1]+v[3])/2+50,
(v[2]+v[4])/2-50,
(v[2]+v[4])/2+50)
poly <- Polygons(list(Polygon(cbind(
c(e@xmin,e@xmin,e@xmax,e@xmax,e@xmin),
c(e@ymin,e@ymax,e@ymax,e@ymin,e@ymin))
)),"box")
lp <- append(lp,list(poly))
## Transform the list into a SPDF PRIMER ERROR
box <-SpatialPolygonsDataFrame(
SpatialPolygons(lp,1:length(lp)),
data.frame("box"),
match.ID = F
)
rasname <- paste0(procimgdir,"aoi1_2004_west_utm.tif")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
rasname <- paste0(procimgdir,"aoi1_2016_spot.TIF")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
}
system(sprintf("(echo %s;echo %s;echo %s;echo %s;echo %s;echo %s) | gdaltransform -i %s > %s",
paste(v1[1],v1[2],sep=" "),
paste(v2[1],v2[2],sep=" "),
paste(v3[1],v3[2],sep=" "),
paste(v4[1],v4[2],sep=" "),
paste(v5[1],v5[2],sep=" "),
paste(v6[1],v6[2],sep=" "),
paste0(procimgdir,"aoi1_2004_west_utm.tif"),
paste0(procimgdir,"coord_west_to_spot.txt")
))
local <- read.table(paste0(procimgdir,"coord_west_to_spot.txt"))
system(sprintf("gdal_translate -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s   %s %s",
local[1,1],local[1,2],v1[3],v1[4],
local[2,1],local[2,2],v2[3],v2[4],
local[3,1],local[3,2],v3[3],v3[4],
local[4,1],local[4,2],v4[3],v4[4],
local[5,1],local[5,2],v5[3],v5[4],
local[6,1],local[6,2],v6[3],v6[4],
paste0(procimgdir,"aoi1_2004_west_utm.tif"),
paste0(procimgdir,"tmp_aoi1_2004_west_utm_shift.tif")
))
system(sprintf("gdalwarp -r bilinear -t_srs EPSG:32633 %s %s",
paste0(procimgdir,"tmp_aoi1_2004_west_utm_shift.tif"),
paste0(procimgdir,"aoi1_2004_west_utm_shift.tif")))
v1 <- c(667796.4,911538.7,667798.4,911545.1)
v2 <- c(666167.6,902519.4,666174.5,902526.8)
v3 <- c(665332.5,900019.8,665338.3,900027.1)
v4 <- c(674294.6,902036.4,674298.1,902050.4)
v5 <- c(673029.4,899582.2,673030.5,899598.0)
v6 <- c(668803.0,897141.2,668809.0,897152.2)
all_v <- rbind(v1,v2,v3,v4,v5,v6)
shift_x <- all_v[,1]-all_v[,3]
shift_y <- all_v[,2]-all_v[,4]
plot(shift_x,shift_y)
dev.off()
plot(shift_x,shift_y)
par(mfrow = c(3,4))
par(mar=c(0,0,0,0))
dev.off()
par(mfrow = c(3,4))
par(mar=c(0,0,0,0))
for(i in 1:6){
v <- all_v[i,]
lp <- list()
e<-extent((v[1]+v[3])/2-50,
(v[1]+v[3])/2+50,
(v[2]+v[4])/2-50,
(v[2]+v[4])/2+50)
poly <- Polygons(list(Polygon(cbind(
c(e@xmin,e@xmin,e@xmax,e@xmax,e@xmin),
c(e@ymin,e@ymax,e@ymax,e@ymin,e@ymin))
)),"box")
lp <- append(lp,list(poly))
## Transform the list into a SPDF PRIMER ERROR
box <-SpatialPolygonsDataFrame(
SpatialPolygons(lp,1:length(lp)),
data.frame("box"),
match.ID = F
)
rasname <- paste0(procimgdir,"aoi1_2004_east_utm.tif")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
rasname <- paste0(procimgdir,"aoi1_2016_spot.TIF")
nir <- crop(raster(rasname,4),box)
grn <- crop(raster(rasname,2),box)
red <- crop(raster(rasname,1),box)
stack <- stack(nir,red,grn)
plot(box)
plotRGB(stack,stretch="hist",add=T)
points(v[1],v[2],col="yellow")
points(v[3],v[4],col="green")
}
system(sprintf("(echo %s;echo %s;echo %s;echo %s;echo %s;echo %s) | gdaltransform -i %s > %s",
paste(v1[1],v1[2],sep=" "),
paste(v2[1],v2[2],sep=" "),
paste(v3[1],v3[2],sep=" "),
paste(v4[1],v4[2],sep=" "),
paste(v5[1],v5[2],sep=" "),
paste(v6[1],v6[2],sep=" "),
paste0(procimgdir,"aoi1_2004_east_utm.tif"),
paste0(procimgdir,"coord_east_to_spot.txt")
))
local <- read.table(paste0(procimgdir,"coord_east_to_spot.txt"))
s
system(sprintf("gdal_translate -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s -gcp %s %s %s %s   %s %s",
local[1,1],local[1,2],v1[3],v1[4],
local[2,1],local[2,2],v2[3],v2[4],
local[3,1],local[3,2],v3[3],v3[4],
local[4,1],local[4,2],v4[3],v4[4],
local[5,1],local[5,2],v5[3],v5[4],
local[6,1],local[6,2],v6[3],v6[4],
paste0(procimgdir,"aoi1_2004_east_utm.tif"),
paste0(procimgdir,"tmp_aoi1_2004_east_utm_shift.tif")
))
system(sprintf("gdalwarp -r bilinear -t_srs EPSG:32633 %s %s",
paste0(procimgdir,"tmp_aoi1_2004_east_utm_shift.tif"),
paste0(procimgdir,"aoi1_2004_east_utm_shift.tif")))
system(sprintf("rm -r %s",
paste0(procimgdir,"tmp_aoi1_2004_*.tif")
))
nbands <- nbands(brick(paste0(procimgdir,"aoi1_2004_utm_shift.tif")))
nbands <- nbands(brick(paste0(procimgdir,"aoi1_2004_east_utm_shift.tif")))
system(sprintf("gdal_merge.py -o %s -co COMPRESS=LZW -co BIGTIFF=YES -v %s %s",
paste0(procimgdir,"tmp_aoi1_2004_merge.tif"),
paste0(procimgdir,"aoi1_2004_west_utm_shift.tif"),
paste0(procimgdir,"aoi1_2004_east_utm_shift.tif")
))
input1 <- paste0(procimgdir,"aoi1_2004_east_utm_shift.tif")
input2 <- paste0(procimgdir,"aoi1_2004_west_utm_shift.tif")
nPoints=10000
band = 1
outdir <- dirname(input2)
base   <- basename(input2)
r1 <- raster(paste0(input1),band)
r2 <- raster(paste0(input2),band)
e1 <- extent(r1)
e2 <- extent(r2)
poly_1 <- Polygons(list(Polygon(cbind(
c(e1@xmin,e1@xmin,e1@xmax,e1@xmax,e1@xmin),
c(e1@ymin,e1@ymax,e1@ymax,e1@ymin,e1@ymin))
)),1)
poly_2 <- Polygons(list(Polygon(cbind(
c(e2@xmin,e2@xmin,e2@xmax,e2@xmax,e2@xmin),
c(e2@ymin,e2@ymax,e2@ymax,e2@ymin,e2@ymin))
)),1)
sp_poly_1 <- SpatialPolygons(list(poly_1))
sp_poly_2 <- SpatialPolygons(list(poly_2))
sp_poly   <- intersect(sp_poly_1,sp_poly_2)
interras <- crop(r1,sp_poly)
writeRaster(crop(r1*0,sp_poly),paste0(procimgdir,"inter.tif"))
temp   <- raster(sp_poly,resolution=res(r1)[1],
ext=extent(sp_poly),crs=proj4string(sp_poly))
raster <- rasterize(x=sp_poly,
y=temp,
field="ID",
background=0,fun='first',
update=TRUE)
raster <- rasterize(x=0,
y=temp,
field="ID",
background=0,fun='first',
update=TRUE)
raster <- rasterize(x=temp,
y=temp,
field="ID",
background=0,fun='first',
update=TRUE)
plot(temp)
?rasterize
temp   <- raster(0,
resolution=res(r1)[1],
ext=extent(sp_poly),
crs=proj4string(sp_poly)
)
temp   <- raster(sp_poly,
resolution=res(r1)[1],
ext=extent(sp_poly),
crs=proj4string(sp_poly)
)
summary(temp)
temp[is.na(temp)] <- 0
plot(temp)
writeRaster(temp,paste0(procimgdir,"inter.tif"))
proj4string(temp)
proj4string(temp) <- proj4string(sp_poly)
proj4string(temp)
proj4string(sp_poly)
proj4string(temp) <- proj4string(r1)
proj4string(temp)
writeRaster(temp,paste0(procimgdir,"inter.tif"))
system(sprintf("oft-clip.pl %s %s %s",
paste0(procimgdir,"inter.tif"),
paste0(procimgdir,"aoi1_2004_east_utm.tif"),
paste0(procimgdir,"aoi1_2004_east_utm_clip.tif")
))
system(sprintf("oft-clip.pl %s %s %s",
paste0(procimgdir,"inter.tif"),
paste0(procimgdir,"aoi1_2004_west_utm_shift.tif"),
paste0(procimgdir,"aoi1_2004_west_utm_shift_clip.tif")
))
system(sprintf("oft-clip.pl %s %s %s",
paste0(procimgdir,"inter.tif"),
paste0(procimgdir,"aoi1_2004_east_utm_shift.tif"),
paste0(procimgdir,"aoi1_2004_east_utm_shift_clip.tif")
))
system(sprintf("otbcli_MultivariateAlterationDetector -in1 %s -in2 %s -out %s",
paste0(procimgdir,"aoi1_2004_east_utm_shift_clip.tif"),
paste0(procimgdir,"aoi1_2004_west_utm_shift_clip.tif"),
paste0(procimgdir,"tmp_chdet.tif")
))
pts <- spsample(sp_poly,n=nPoints,"random")
h1 <- data.frame(extract(x = r1,y = pts))
h2 <- data.frame(extract(x = r2,y = pts))
r3 <- raster(paste0(procimgdir,"tmp_chdet.tif"))
h3 <- data.frame(extract(x = r3,y = pts))
hh <- data.frame(cbind(h1,h2,h3))
r3 <- brick(paste0(procimgdir,"tmp_chdet.tif"))
h3 <- data.frame(extract(x = r3,y = pts))
hh <- data.frame(cbind(h1,h2,h3))
names(hh) <- c("X1","X2",paste0("chdet",1:nbands))
hh <- hh[!is.na(hh$X1),]
hh <- hh[!is.na(hh$X2),]
hh <- hh[hh$X1 != 0 ,]
hh <- hh[hh$X2 != 0 ,]
hh <- hh[hh$X1 > quantile(hh$X1,probs= seq(0,1,0.1))[2] & hh$X1 < quantile(hh$X1,probs= seq(0,1,0.1))[10],]
hh <- hh[hh$X2 > quantile(hh$X2,probs= seq(0,1,0.1))[2] & hh$X2 < quantile(hh$X2,probs= seq(0,1,0.1))[10],]
plot(hh$X1,hh$X2)
dev.off()
plot(hh$X1,hh$X2)
summary(hh)
points(hh[hh$chdet4 <1,]$X1,hh[hh$chdet4 <1,]$X2,col="blue")
plot(hh$X1,hh$X2)
points(hh[hh$chdet4 <-1,]$X1,hh[hh$chdet4 <-1,]$X2,col="blue")
points(hh[hh$chdet4 < 0,]$X1,hh[hh$chdet4 < 0,]$X2,col="blue")
plot(hh$X1,hh$X2)
points(hh[hh$chdet4 < 0,]$X1,hh[hh$chdet4 < 0,]$X2,col="blue")
hh <- data.frame(cbind(h1,h2,h3))
names(hh) <- c("X1","X2",paste0("chdet",1:nbands))
hh <- hh[!is.na(hh$X1),]
hh <- hh[!is.na(hh$X2),]
hh <- hh[hh$X1 != 0 ,]
hh <- hh[hh$X2 != 0 ,]
hh <- hh[hh$X1 > quantile(hh$X1,probs= seq(0,1,0.1))[2] & hh$X1 < quantile(hh$X1,probs= seq(0,1,0.1))[10],]
hh <- hh[hh$X2 > quantile(hh$X2,probs= seq(0,1,0.1))[2] & hh$X2 < quantile(hh$X2,probs= seq(0,1,0.1))[10],]
dev.off()
plot(hh$X1,hh$X2)
points(hh[hh$chdet4 < 0,]$X1,hh[hh$chdet4 < 0,]$X2,col="blue")
plot(hh$X1,hh$X2)
points(hh[hh$chdet4 < -0.5,]$X1,hh[hh$chdet4 < -0.5,]$X2,col="blue")
r1 <- brick(paste0(input1))
r2 <- brick(paste0(input2))
h1 <- data.frame(extract(x = r1,y = pts))
h2 <- data.frame(extract(x = r2,y = pts))
names(hh) <- c(paste0("X1",1:nbands),paste0("X2",1:nbands),paste0("chdet",1:nbands))
hh <- data.frame(cbind(h1,h2,h3))
names(hh) <- c(paste0("X1",1:nbands),paste0("X2",1:nbands),paste0("chdet",1:nbands))
hh <- hh[!is.na(c(paste0("X1",1:nbands)),]
hh <- hh[!is.na(hh$X2),]
hh <- hh[hh$X1 != 0 ,]
hh <- hh[hh$X2 != 0 ,]
hh <- hh[hh$X1 > quantile(hh$X1,probs= seq(0,1,0.1))[2] & hh$X1 < quantile(hh$X1,probs= seq(0,1,0.1))[10],]
hh <- hh[hh$X2 > quantile(hh$X2,probs= seq(0,1,0.1))[2] & hh$X2 < quantile(hh$X2,probs= seq(0,1,0.1))[10],]
dev.off()
plot(hh$X1,hh$X2)
summary(hh)
points(hh[hh$chdet4 < -0.5,]$X1,hh[hh$chdet4 < -0.5,]$X2,col="blue")
#######  GLM of dataset 1 vs dataset 2 and normalized raster 2 as output
glm12 <- lm(hh$X1 ~ hh$X2)
plot(hh$residuals)
hh$residuals <- residuals(glm12)
hh$score<-scores(hh$residuals,type="z")
outlier <- hh[abs(hh$score)>1,]
plot(X2 ~ X1,hh,col="darkgrey")
points(X2 ~ X1,outlier,col="red")
summary(hh)
hh <- hh[abs(hh$score)<=2,]
glm12 <- glm(hh$X1 ~ hh$X2)
i12 <- glm12$coefficients[1]
c12 <- glm12$coefficients[2]
#######  Apply model to have a normalized input2
system(sprintf("gdal_calc.py -A %s --outfile=%s --NoDataValue=0 --co COMPRESS=LZW --calc=\"%s\"",
input2,
paste0(outdir,"/","norm_",base),
paste0("(A>0)*(A*",c12,"+",i12,")")
))
}
hh <- hh[!is.na(paste0("X1",1:nbands)),]
hh <- data.frame(cbind(h1,h2,h3))
names(hh) <- c(paste0("X1",1:nbands),paste0("X2",1:nbands),paste0("chdet",1:nbands))
hh <- hh[!is.na(paste0("X1",1:nbands)),]
hh <- hh[!is.na(paste0("X2",1:nbands)),]
hh <- hh[hh$X1 != 0 ,]
hh <- data.frame(cbind(h1,h2,h3))
names(hh) <- c(paste0("X1",1:nbands),paste0("X2",1:nbands),paste0("chdet",1:nbands))
hh <- hh[!is.na(paste0("X1",1:nbands)),]
hh <- hh[!is.na(paste0("X2",1:nbands)),]
hh <- hh[paste0("X1",1:nbands) != 0 ,]
summary(hh)
library(RStoolbox
)
####################################################################################
####### Object:  Processing chain - MASTER script for parameters
####### Author:  remi.dannunzio@fao.org
####### Update:  2017/09/01
####################################################################################
####### SET WHERE YOUR SCRIPTS ARE CLONED
clonedir  <- paste0("/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/tchad/scripts_tchad/")
####### SET WHERE YOUR IMAGE DIRECTORY IS
rawimgdir   <- "/media/dannunzio/hdd_remi/tchad/"
####### DATA WILL BE CREATED AND STORED HERE
rootdir    <- "/media/dannunzio/hdd_remi/tchad/"
#############################################################################
#############################################################################
#############################################################################
#############################################################################
####### Sub-directories
scriptdir  <- paste0(clonedir,"process/")
p_procdir  <- paste0(clonedir,"pre-processing/")
####################################################################################
#######          PACKAGES
####################################################################################
source(paste0(scriptdir,"load_packages.R"),echo=TRUE)
####################################################################################
#######          SET PARAMETERS GENERAL
####################################################################################
source(paste0(scriptdir,"set_parameters_master.R"),echo=TRUE)
####################################################################################
#######          CHANGE ACCORDINGLY TO PERIOD OF INTEREST
####################################################################################
time1       <- "2004"
time2       <- "2016"
tile        <- "aoi1_east"
t1_file  <- paste0(t1_dir,"aoi1_2004_east_utm_shift.tif")
t2_file  <- paste0(t2_dir,"aoi1_2016_spot.TIF")
t1_train <- paste0(training_dir,"training_aoi1_2004.shp")
t2_train <- paste0(training_dir,"training_aoi1_2016.shp")
####################################################################################
#######          SET PARAMETERS FOR THE IMAGES OF INTEREST
####################################################################################
source(paste0(scriptdir,"set_parameters_imad.R"),echo=TRUE)
################################################################################
## Parameters for classification for time 1
outdir        <- paste0(tiledir,"/time1/")
dir.create(outdir)
im_input      <- t1_input
train_man_shp <- t1_train
source(paste0(scriptdir,"set_parameters_classif.R"),echo=TRUE)
t1_file_m   <-  output_rf   # time 1 file
t1_segs     <- all_sg_id
segs_id     <- t1_segs
time        <- time1
################################################################################
## Parameters for merge
source(paste0(scriptdir,"set_parameters_merge.R"),echo=TRUE)
################################################################################
## Parameters for classification for time 2
outdir  <- paste0(tiledir,"/time2/")
dir.create(outdir)
im_input <- t2_input
source(paste0(scriptdir,"set_parameters_classif.R"),echo=TRUE)
t2_file_m   <-  output_rf  # time 2 file
t2_segs     <- all_sg_id
segs_id     <- t2_segs
time        <- time2
################################################################################
## Parameters for merge
source(paste0(scriptdir,"set_parameters_merge.R"),echo=TRUE)
setwd(scriptdir)
chg_class
outdir        <- paste0(tiledir,"/time1/")
dir.create(outdir)
im_input      <- t1_input
train_man_shp <- t1_train
source(paste0(scriptdir,"set_parameters_classif.R"),echo=TRUE)
t1_file_m   <-  output_rf   # time 1 file
t1_segs     <- all_sg_id
segs_id     <- t1_segs
time        <- time1
change_t1   <- chg_closed
outdir  <- paste0(tiledir,"/time2/")
dir.create(outdir)
im_input <- t2_input
source(paste0(scriptdir,"set_parameters_classif.R"),echo=TRUE)
t2_file_m   <-  output_rf  # time 2 file
t2_segs     <- all_sg_id
segs_id     <- t2_segs
time        <- time2
change_t2   <- chg_closed
change_t2   <- chg_closed
